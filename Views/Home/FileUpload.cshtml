@{
    ViewData["Title"] = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using System.Security.Cryptography;
@using System.Text;
@{
    // Get the username from User.Identity
    string username = User?.Identity?.Name ?? "Unknown";
    // Hash the username using SHA-256
    using (SHA256 sha256 = SHA256.Create())
    {
        byte[] hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(username));
        string hashedUsername = BitConverter.ToString(hashedBytes).Replace("-", "").ToLowerInvariant();

        <script>
            sessionStorage.setItem("sessionNamespace", "133393fcd8d64c1308c7deaacbb98f049506b7775cb26e18edf4cec6298d57c0");
            @* sessionStorage.setItem("sessionNamespace", "@hashedUsername"); *@
        </script>
    }
}



<link rel="stylesheet" href="~/css/fileUpload.css">

<style>
    .container {
        max-width: 2000px !important;
    }

    .site-container {
        width: 100%;
    }

    .upload-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 5%;
        width: 66%;
        height: 100%;
        margin-right: 10%;
        margin-left: 0.6%;
        background-color: #c7c7c7;
    }

    .description-container {
        padding: 5%;
        display: flex;
        background-color: #f7f7f7;
        flex-direction: column;
    }

    .description-input {
        margin-bottom: 1rem;
        /* Add some spacing between inputs */
    }

    .description-label {
        font-weight: bold;
        margin-bottom: 5px;
        /* Add spacing between label and input */
    }

    .selected-file-name {
        margin-top: 2%;
        padding-bottom: 10%;

    }

    .next-button {
        margin-bottom: 10%;
    }

    .uploadStatus {
        border: 1px solid black;
        margin-top: 2%;
        @*display:none;*@
    }

    .row>.col-lg-8,
    .row,
    .col-lg-4 {
        margin-right: auto;
        flex: 0 0 auto;
    }

    .row>.col-lg-4:last-child {
        margin-left: auto;
    }
</style>

<body>
    <div class="container site-container p-0">
        <div class="row page-row h-85">
            <div class="col-lg-8 upload-container bg-light border">
                <h1>File Upload</h1>
                <p>Drag and drop your files here or browse to select files.</p>

                <button class="btn btn-primary btn-lg" type="button" id="upload-button"
                    onclick="uploadDocumentToApplication()">
                    Browse files
                </button>
                <span class="selected-file-name" id="selected-file-name"></span>
                <div id="uploadStatus"></div>
            </div>
            <div class="col-lg-4 text-white border description-container">
                <h1 class="text-dark">For More Context</h1>
                <button type="button" onclick="uploadDocumentToPinecone()" class="btn btn-primary next-button mt-3"
                    disabled id="nextButton" onclick="saveDocumentDescription()">Next</button>
                <div class="description-input">
                    <label for="documentName" class="description-label text-dark">Document Name</label>
                    <input type="text" id="documentName" class="form-control" required>
                </div>
                <div class="description-input">
                    <label for="documentType" class="description-label text-dark">Category</label>
                    <select id="documentType" class="form-select" required>
                        <option value="">Select Document Type</option>
                        <option value="report">Legal</option>
                        <option value="presentation">Financial</option>
                        <option value="operational">Operational</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="description-input">
                    <label for="documentDescription" class="description-label text-dark">Brief Description</label>
                    <textarea id="documentDescription" rows="5" class="form-control" required></textarea>
                </div>
                @* Enable after document upload successful *@

            </div>
        </div>
    </div>
</body>


<script>
    const documentNameInput = document.getElementById('documentName');
    const documentTypeInput = document.getElementById('documentType');
    const documentDescriptionInput = document.getElementById('documentDescription');
    const nextButton = document.getElementById('nextButton');

    documentNameInput.addEventListener('keyup', () => {
        validateForm();
    });

    documentTypeInput.addEventListener('change', () => {
        validateForm();
    });

    documentDescriptionInput.addEventListener('keyup', () => {
        validateForm();
    });

    function validateForm() {
        const documentName = documentNameInput.value.trim();
        const documentType = documentTypeInput.value;
        const documentDescription = documentDescriptionInput.value.trim();

        // Enable the button only if all fields have a value
        nextButton.disabled = !(documentName && documentType && documentDescription);
    }

    // Call validateForm on page load to handle initial state
    validateForm();


    function saveDocumentDescription(documentName, documentType, documentDescription) {
        const data = {
            documentName,
            documentType,
            documentDescription
        };

        const jsonData = JSON.stringify(data);

        try {
            const fs = require('fs');
            fs.writeFileSync('documentDescription.JSON', jsonData);
            console.log('Document description saved successfully.');
        } catch (error) {
            console.log('Error saving document description:', error);
        }
    }

    const fileInput = document.getElementById('fileInput');
    const uploadStatus = document.getElementById('uploadStatus');

    async function uploadDocumentToApplication() {
        const uploadButton = document.getElementById('upload-button');
        const selectedFileName = document.getElementById('selected-file-name');
        const fileInput = document.createElement("input");
        fileInput.setAttribute("id", "fileInput");
        fileInput.type = "file";
        fileInput.click();

        fileInput.addEventListener("change", (event) => {
            const selectedFile = event.target.files[0];
            sessionStorage.setItem("selectedFile", selectedFile.name);
            // Check for supported file types
            const allowedExtensions = ['pdf', 'docx', 'doc'];
            const fileExtension = selectedFile.name.split('.').pop().toLowerCase();
            const deleteButton = document.getElementById('delete-button');
            const uploadFileDisplay = document.getElementById('uploadFileDisplayPanel');

            if (!allowedExtensions.includes(fileExtension)) {
                displayError("Only PDF, DOCX, DOC files are allowed.");
                return;
            }
            sendFileToMongoDB(selectedFile);

            selectedFileName.textContent = selectedFile.name;
        });
    }

    async function sendFileToMongoDB(selectedFile) {
        const formData = new FormData();
        formData.append('targetFile', selectedFile);

        const namespace = sessionStorage.getItem("sessionNamespace");
        const url = `https://strive-api.azurewebsites.net/api/MongoDB/UploadDocument?collectionName=${namespace}`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': '*',
                    'Access-Control-Allow-Headers': '*'
                },
                body: formData

            });

            if (!response.ok) {
                throw new Error('Failed to upload file to MongoDB collection.');
            }


            const data = await response.json();
            console.log(data);
        } catch (error) {
            console.error('Error uploading file to MongoDB collection:', error.message);
        }
    }

    @* async function uploadDocumentToPinecone() {
        const requestBody = {
        Namespace: sessionStorage.getItem("sessionNamespace"),
        FileName: sessionStorage.getItem("selectedFile")
        };
        await fetch("https://strive-ml-api.azurewebsites.net/embedder", {
        method: 'POST',
        headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': '*',
        'Access-Control-Allow-Headers': '*'
        },
        body: JSON.stringify(requestBody)
        })
        .then(response => {
        if (!response.ok) {
        displayError("System is under maintenance. Please try again later.")
        throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
        })
        .catch(error => {
        displayError("System is under maintenance. Please try again later.");
        console.error('Fetch error:', error);
        });
        } *@


        function displayError(errorMessage) {
            var errorBackground = document.getElementById("error-background");
            var errorCloseButton = document.getElementById("error-close");
            var errorText = document.getElementById("error-message");
            errorText.innerText = errorMessage;
            errorBackground.style.display = "block";
            errorCloseButton.onclick = function () {
                errorBackground.style.display = "none";
            }
        }

    function showLoader() {
        document.getElementById("loader-spinner").style.display = "";
        document.getElementById("page-container").style.opacity = 0.5;
    }

    function hideLoader() {
        document.getElementById("loader-spinner").style.display = "none";
        document.getElementById("page-container").style.opacity = 1;

    }

</script>
