@{
    ViewData["Title"] = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/fileUpload.css">

<style>
    .container {
        max-width: 2000px !important;
    }

    .site-container {
        width: 100%;
    }

    .upload-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 5%;
        width: 66%;
        height: 100%;
        margin-right: 10%;
    }

    .description-container {
        padding: 5%;
        display: flex;
        flex-direction: column;
    }

    .description-input {
        margin-bottom: 1rem;
        /* Add some spacing between inputs */
    }

    .description-label {
        font-weight: bold;
        margin-bottom: 5px;
        /* Add spacing between label and input */
    }

    .selected-file-name {
        margin-top: 2%;

    }

    .chooseFile {}

    .row>.col-lg-8,
    .row,
    .col-lg-4 {
        margin-right: auto;
        flex: 0 0 auto;
    }

    .row>.col-lg-4:last-child {
        margin-left: auto;
    }
</style>

<body>
    <div class="container site-container p-0">
        <div class="row page-row h-85">
            <div class="col-lg-8 upload-container bg-light border">
                <h1>File Upload</h1>
                <p>Drag and drop your files here or browse to select files.</p>

                <button class="btn btn-primary btn-lg" type="button" id="upload-button"
                    onclick="uploadDocumentToApplication()">
                    Browse files
                </button>
                <span class="selected-file-name" id="selected-file-name"></span>
                <div id="uploadStatus"></div>
            </div>
            <div class="col-lg-4 bg-primary text-white border description-container">
                <h1>For More Context</h1>
                <div class="description-input">
                    <label for="documentName" class="description-label">Document Name</label>
                    <input type="text" id="documentName" class="form-control" required>
                </div>
                <div class="description-input">
                    <label for="documentType" class="description-label">Category</label>
                    <select id="documentType" class="form-select" required>
                        <option value="">Select Document Type</option>
                        <option value="report">Legal</option>
                        <option value="presentation">Financial</option>
                        <option value="operational">Operational</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="description-input">
                    <label for="documentDescription" class="description-label">Brief Description</label>
                    <textarea id="documentDescription" rows="5" class="form-control" required></textarea>
                </div>
                <button type="button" class="btn btn-primary mt-3">Next</button>
            </div>
        </div>
    </div>
</body>

<script>
    const fileInput = document.getElementById('fileInput');
    const uploadStatus = document.getElementById('uploadStatus');

    fileInput.addEventListener('change', (e) => {
        const files = e.target.files;
        // Add logic to process and upload files here
        uploadStatus.textContent = `Selected ${files.length} files.`;
    });


    async function uploadDocumentToApplication() {
        const uploadButton = document.getElementById('upload-button');
        const selectedFileName = document.getElementById('selected-file-name');
        const fileInput = document.createElement("input");
        fileInput.type = "file";

        fileInput.addEventListener("change", (event) => {
            const selectedFile = event.target.files[0];
            // Check for supported file types
            const allowedExtensions = ['pdf', 'docx', 'doc'];
            const fileExtension = selectedFile.name.split('.').pop().toLowerCase();
            const deleteButton = document.getElementById('delete-button');
            const uploadFileDisplay = document.getElementById('uploadFileDisplayPanel');

            if (!allowedExtensions.includes(fileExtension)) {
                displayError("Only PDF, DOCX, DOC files are allowed.");
                return;
            }

            if (selectedFile) {
                const getFileRequestBody = {
                    FileName: selectedFile.name
                }
                fetch(window.location.protocol + "//" + window.location.host + "/api/fileupload/getFile", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(getFileRequestBody)
                })
                    .then(response => {
                        if (!response.ok) {
                            displayError("System is under maintenance. Please try again later.");
                        }
                        return response.json();
                    })
                    .then(data => {
                        const fileExists = data.data.fileExists;
                        selectedFileName.textContent = selectedFile.name;
                        if (fileExists) {
                            displayError("File is already uploaded, please try another file.");
                            return;
                        }
                        else {


                            // Send the selected file to the API for server-side execution
                            const formData = new FormData();
                            formData.append('targetFile', selectedFile);
                            showLoader();
                            fetch('/api/fileupload/upload', {
                                method: 'POST',
                                body: formData
                            })
                                .then(response => {
                                    hideLoader();
                                    if (!response.ok) {
                                        displayError("System is under maintenance. Please try again later.")
                                        throw new Error(`HTTP error! Status: ${response.status}`);
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    sessionStorage.setItem("selectedFiles", data.data.fileName);
                                    if (sessionStorage.getItem("selectedFiles") !== null) {
                                        uploadFileDisplay.classList.remove('d-none');
                                        document.getElementById("next-button").removeAttribute("disabled");
                                        // Show delete button upon file selection
                                        deleteButton.classList.remove('d-none');
                                    }
                                })
                                .catch(error => {
                                    hideLoader();
                                    displayError("System is under maintenance. Please try again later.")
                                    console.log('Upload error:', error);
                                });
                            hideLoader();
                        }
                    })
                    .catch(error => {
                        displayError("System is under maintenance. Please try again later.")
                        console.log('Get error:', error);
                    });
            }

        });
        fileInput.click(); // Trigger the file selection dialog
    }

</script>
