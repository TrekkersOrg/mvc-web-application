@{
    ViewData["Title"] = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn-primary.rounded-pill.btn-lg:hover {
        background-color: #400d3d;
        color: white;
        border: transparent;
    }

    .btn-primary.rounded-pill.btn-lg {
        width: 180px;
        height: 50px;
        color: white;
        background-color:black;
        border: transparent;
        position: relative;
        padding: 8px 20px;
    }

    .bg-gradient {
        color: #f7f7f7;
        min-height: 100vh;
        margin-bottom: 10vh;
        position: relative;
    }

    .header-container {
        padding-top: 5vh;
    }


    .instructions-box {
        background-color: #f5f5f5;
        box-shadow: 0px -2px 10px rgba(0, 0, 0, 0.2);
        padding: 20px;
        margin-top: 20px;
        position: relative;
    }

    .instructions-list {
        list-style-type: numbered;
        position: relative;
    }

    .paneling {
        position: relative;
        background-color: #e0e0e0;
        border-bottom-right-radius: 4px;
        border-bottom-left-radius: 4px;
        border-bottom: 1px solid #eee;
        width: 40vw !important;
        height: 3.5vh;
    }

    .close {
        position:absolute;
        top: -1vh;
        right: -0vw;
        font-size: 1.5rem;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover {
        color: red;
    }
</style>





<link rel="stylesheet" href="~/css/fileUpload.css">
<div class="container-fluid" id="page-container">
    <div class="row mt-5">
        <div class="col-12 h-100 text-center header-container">
            <header>
                <h1>File Upload Portal</h1>
            </header>
        </div>
    </div>

    <div class="row mt-5 justify-content-center text-center">

        <div class="col-md-5 d-flex justify-content-end h-200 p-2">
            <button class="btn btn-primary rounded-pill btn-lg text-white text-decoration-none" type="button"
                id="upload-button" onclick="uploadDocumentToApplication()">
                Browse files
            </button>
        </div>
        <div class="col-md-5 d-flex justify-content-start h-100 p-2">
            <button class="btn btn-primary rounded-pill btn-lg text-white text-decoration-none"
                onclick="uploadFileFlow();" type="button" id="next-button" disabled>Next</button>
        </div>

        <div class="paneling">
            <span class="close">&times;</span>
            <span id="selected-file-name text-dark">0 Files Uploaded</span>
        </div>
    </div>

    <div class="row mt-4 justify-content-center">
        <button class="btn btn-primary rounded-pill btn-lg text-white text-decoration-none d-none"
            onclick="deleteSelectedFile()" type="button" id="delete-button">Delete</button>
    </div>

    <div class="error-background" id="error-background">
        <div class="error-container">
            <span class="error-close" id="error-close">&times;</span>
            <h2 class="error-title">Error</h2>
            <p id="error-message"></p>
        </div>
    </div>
</div>
<div class="container-fluid" id="page-container">
    <div class="row mt-4 justify-content-center">
        <div class="col-md-6 instructions-box">
            <h3 class="mb-3">Instructions</h3>
            <ul class="instructions-list">
                <li>Click "Browse files" to select a file to upload.</li>
                <li>The selected file name will be displayed below the button.</li>
                <li>Once a file is selected, the "Delete" button will appear.</li>
                <li>(Optional) You can delete the selected file using the "Delete" button.</li>
                <li>Click "Next" to proceed to the next step.</li>
            </ul>
        </div>
    </div>
</div>

<svg class="loader-spinner" id="loader-spinner" version=" 1.2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 59">
    <path
        d="M55.42 25.14C55.64 26.48 55.75 27.85 55.75 29.25C55.75 43.27 44.46 54.61 30.5 54.61C16.54 54.61 5.25 43.27 5.25 29.25C5.25 15.23 16.54 3.89 30.5 3.89 C34.8 3.89 38.84 4.97 42.38 6.86" />
    <path
        d="M44.28 33.78C44.04 32.45 43.9 31.08 43.88 29.68C43.64 15.66 54.73 4.13 68.69 3.9C82.65 3.66 94.13 14.8 94.37 28.82C94.61 42.84 83.52 54.36 69.56 54.6C65.26 54.68 61.19 53.67 57.62 51.84" />
</svg>


@{
    string username = User.Identity.Name;
}
<script>
    sessionStorage.setItem("sessionNamespace", @Html.Raw(Json.Serialize(username)))
</script>
<script src="/js/fileUpload.js"></script>
<script>

    function deleteSelectedFile() {
        const selectedFileName = document.getElementById('selected-file-name');
        const deleteFileButton = document.getElementById("delete-button");
        deleteFileButton.addEventListener("click", deleteSelectedFile);
        const requestBody = {
            FileName: localStorage.getItem("selectedFiles")
        };
        fetch(window.location.protocol + "//" + window.location.host + "/api/fileupload/delete", {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        })
            .then(response => {
                if (!response.ok) {
                    displayError("System is under maintenance. Please try again later.")
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
            })
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                displayError("System is under maintenance. Please try again later.")
                console.error('Fetch error:', error);
            });
        localStorage.removeItem("selectedFiles", selectedFileName);

    }

    function uploadDocumentToApplication() {
        const uploadButton = document.getElementById('upload-button');
        const selectedFileName = document.getElementById('selected-file-name');
        const fileInput = document.createElement("input");
        fileInput.type = "file";

        fileInput.addEventListener("change", (event) => {
            const selectedFile = event.target.files[0];
            // Check for supported file types
            const allowedExtensions = ['pdf', 'docx', 'doc'];
            const fileExtension = selectedFile.name.split('.').pop().toLowerCase();
            const deleteButton = document.getElementById('delete-button');

            if (!allowedExtensions.includes(fileExtension)) {
                displayError("Only PDF, DOCX, DOC files are allowed.");
                return;
            }

            if (selectedFile) {
                const getFileRequestBody = {
                    FileName: selectedFile.name
                }
                fetch(window.location.protocol + "//" + window.location.host + "/api/fileupload/getFile", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(getFileRequestBody)
                })
                    .then(response => {
                        if (!response.ok) {
                            displayError("System is under maintenance. Please try again later.");
                        }
                        return response.json();
                    })
                    .then(data => {
                        const fileExists = data.data.fileExists;
                        selectedFileName.textContent = selectedFile.name;
                        if (fileExists) {
                            displayError("File is already uploaded, please try another file.");
                            return;
                        }
                        else {


                            // Send the selected file to the API for server-side execution
                            const formData = new FormData();
                            formData.append('targetFile', selectedFile);
                            showLoader();
                            fetch('/api/fileupload/upload', {
                                method: 'POST',
                                body: formData
                            })
                                .then(response => {
                                    hideLoader();
                                    if (!response.ok) {
                                        displayError("System is under maintenance. Please try again later.")
                                        throw new Error(`HTTP error! Status: ${response.status}`);
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    localStorage.setItem("selectedFiles", data.data.fileName);
                                    if (localStorage.getItem("selectedFiles") !== null) {
                                        document.getElementById("next-button").removeAttribute("disabled");
                                        // Show delete button upon file selection
                                        deleteButton.classList.remove('d-none');
                                    }
                                })
                                .catch(error => {
                                    hideLoader();
                                    displayError("System is under maintenance. Please try again later.")
                                    console.log('Upload error:', error);
                                });
                            hideLoader();
                        }
                    })
                    .catch(error => {
                        displayError("System is under maintenance. Please try again later.")
                        console.log('Get error:', error);
                    });
            }

        });
        fileInput.click(); // Trigger the file selection dialog
    }

    async function uploadDocumentToPinecone() {
        const requestBody = {
            Namespace: sessionStorage.getItem("sessionNamespace"),
            FileName: localStorage.getItem("selectedFiles")
        };
        showLoader();
        await fetch(window.location.protocol + "//" + window.location.host + "/api/indexer/insertDocument", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        })
            .then(response => {
                hideLoader();
                if (!response.ok) {
                    sessionStorage.setItem("insertDocumentStatus", "fail");
                    displayError("System is under maintenance. Please try again later.")
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                sessionStorage.setItem("insertDocumentStatus", "success");
                return response.json();
            })
            .then(data => {
                hideLoader();
                sessionStorage.setItem("insertDocumentStatus", "success");
                console.log(data);
            })
            .catch(error => {
                sessionStorage.setItem("insertDocumentStatus", "fail");
                hideLoader();
                displayError("System is under maintenance. Please try again later.")
                console.error('Fetch error:', error);
            });
        return Promise.resolve();


    }

    function displayError(errorMessage) {
        var errorBackground = document.getElementById("error-background");
        var errorCloseButton = document.getElementById("error-close");
        var errorText = document.getElementById("error-message");
        errorText.innerText = errorMessage;
        errorBackground.style.display = "block";
        errorCloseButton.onclick = function () {
            errorBackground.style.display = "none";
        }
    }

    function showLoader() {
        document.getElementById("loader-spinner").style.display = "";
        document.getElementById("page-container").style.opacity = 0.5;
    }

    function hideLoader() {
        document.getElementById("loader-spinner").style.display = "none";
        document.getElementById("page-container").style.opacity = 1;

    }



    async function generateSummary() {
        const summaryParagraph = document.querySelector(".insert-summary p");
        const requestBody = {
            Vectorstore: sessionStorage.getItem("sessionNamespace"),
            Query: "Generate a brief yet informative summary about this especially the critical details (e.g., dates, people, references). Make sure your summary does not exceed 250 words."
        };
        showLoader();
        await fetch(window.location.protocol + "//" + window.location.host + "/api/chatbot/sendQuery", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        })
            .then(response => {
                if (!response.ok) {
                    sessionStorage.setItem("generateSummaryStatus", "fail");
                    displayError("System is under maintenance. Please try again later.")
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                sessionStorage.setItem("generateSummaryStatus", "success");

                return response.json();
            })
            .then(data => {
                sessionStorage.setItem("generateSummaryStatus", "success");
                localStorage.setItem("documentSummary", data["data"]["response"]);
                hideLoader();
            })
            .catch(error => {
                sessionStorage.setItem("generateSummaryStatus", "fail");
                hideLoader();
                displayError("System is under maintenance. Please try again later.");
                console.error('Fetch error:', error);
            });
        return Promise.resolve();
    }

    function routeToDocumentAnalysis() {
        var documentAnalysisUrl = window.location.protocol + "//" + window.location.host + '/Home/DocumentAnalysis';
        window.location.href = documentAnalysisUrl;
        return Promise.resolve();
    }

    async function uploadFileFlow() {
        await uploadDocumentToPinecone();
        if (sessionStorage.getItem("insertDocumentStatus") == "fail") {
            return;
        }
        else {
            await routeToDocumentAnalysis();
            /*await generateSummary();
            if (sessionStorage.getItem("generateSummaryStatus") == "fail")
            {
                return;
            }
            else
            {
                await routeToDocumentAnalysis();
            }*/
        }
    }
    window.onload = function () {
        hideLoader();
    };
</script>
