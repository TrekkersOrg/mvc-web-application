@{
    ViewData["Title"] = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f7f7f7;
    }

    .top-row {
        margin-top: 10vh;
    }

    .summary-col {
        position: relative;
        margin-right: 5vw;
        margin-top: -5vh;
    }

    .chat-col {
        position: relative;
        margin-top: -5vh;
    }

    .viewdocument-button-row {
        margin-bottom: 5vh;
    }


    .btn-warning:hover {
        background-color: transparent;
        color: rgb(255, 157, 0);
    }

    .newupload-btn:hover {
        background-color: rgb(68, 64, 64);
        color: white;
    }

    .btn-block {
        border: 1px solid grey;
        background-color: grey;
    }

    .btn-primary-viewdoc {
        color: green;
        position: relative;
        border: 1px solid green;
        margin-left: 1vw;
        margin-right: 0vw !important;
    }

    .btn-primary-viewdoc:hover {
        background-color: rgb(68, 64, 64);
        color: white;
    }


    .chat-container {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: calc(100% - 20px);
    }

    .chatbot-input {
        border: 1px solid grey;
        border-radius: 5px;
        padding: 10px;
        margin-top: 10px;
        overflow-y: auto;
    }

    .chatbot-col {
        margin-top: 0.9vh;
        height: 50vh;
    }

    .response-container {
        margin-left: 0.4vw;
    }

    .input-container {
        border-radius: 5px;
        overflow-y: auto;
        width: 100%;
    }

    .chatbot-query-container {
        margin-top: 1vh;
        border: 2px solid rgb(0, 99, 12);
        border-radius: 5px;
    }

    .chat-messages {
        margin-right: 0.8vw;
        text-align: right;
        margin-bottom: 1vh;
    }

    .chatbot-responses {
        overflow-y: auto !important;
        border: 1px solid black;
    }

    .chatInput-container {
        margin-top: auto;
        border-radius: 5px;
        padding: 10px;
    }

    .loader-spinner {
        width: 300px;
        z-index: 9999;
        top: 50%;
        left: 37%;
        position: fixed;
    }

    .loader-spinner path {
        --total-length: 136px;
        stroke-linecap: round;
        stroke-width: 6;
        stroke: #000000;
        fill: none;
        stroke-dasharray: var(--total-length) var(--total-length);
        animation: animate 2s linear infinite;
    }

    .save-col {
        margin-top: 5vh;
    }

    .system-bubble p {
        background: #f1f1f1;
        color: #000 !important;
        border-radius: 20px 20px 20px 3px;
        display: block;
        max-width: 75%;
        padding: 7px 13px 7px 13px;
    }

    .user-bubble p {
        background: #42a5f5;
        color: #000 !important;
        border-radius: 20px 20px 3px 20px;
        display: block;
        max-width: 75%;
        padding: 7px 13px 7px 13px;
    }
</style>

<link rel="stylesheet" href="~/Views/Home/Index.css" asp-append-version="true">
<link rel="stylesheet" href="~/css/documentAnalysis.css">

<body>
    <div id="page-container" class="container-fluid bg-color">
        <div class="row top-row">
            <div class="col summary-col summary-border">
                <div class="row summary-title-row">
                    <h4 id="title-box"></h4>
                </div>
                <div class="col text-col">
                    <p id="summary-box"></p>
                </div>
                <div class="row viewdocumentbtn-row">
                    <div class="col viewdocument-button-col">
                        <a class="btn btn-warning btn-lg savebtn-btn">Save</a>
                        <a class="btn btn-primary-viewdoc btn-lg">View Document</a>
                        <a class="btn btn-primary-viewdoc btn-lg" onclick="newUploadFlow()">New Upload</a>
                        @* <a class="btn btn-lg newupload-btn btn-block" onclick="newUploadFlow()">New Upload</a> *@
                    </div>
                </div>
            </div>
            <div class="col chatbot-col">
                <div class="row header">
                    <div class="header-container">
                        <h4>Ask Donna</h4>
                    </div>
                </div>

                <div class="chat-container border rounded shadow bg-light">
                    <div class="chatbot-responses flex-grow-1 overflow-auto p-3" id="chat-window">
                        <div class="response-container container-flex">
                            <p style="display: none !important" class="chat-reponses list-unstyled" id="response-output">&#8594;Lorem ipsum dolor sit
                                amet
                                consectetur adipisicing elit. Maiores enim libero quidem dolorum, iusto sint architecto
                                inventore eligendi recusandae cumque quod aperiam ut ea nostrum ex, similique molestias.
                                Possimus, voluptatum!Lorem ipsum dolor sit amet
                                consectetur adipisicing elit. Maiores enim libero quidem dolorum, iusto sint architecto
                                inventore eligendi recusandae cumque quod aperiam ut ea nostrum ex, similique molestias.
                                Possimus, voluptatum!Lorem ipsum dolor sit amet
                                consectetur adipisicing elit. Maiores enim libero quidem dolorum, iusto sint architecto
                                inventore eligendi recusandae cumque quod aperiam ut ea nostrum ex, similique molestias.
                                Possimus, voluptatum!Lorem ipsum dolor sit amet
                                consectetur adipisicing elit. Maiores enim libero quidem dolorum, iusto sint architecto
                                inventore eligendi recusandae cumque quod aperiam ut ea nostrum ex, similique molestias.
                                Possimus, voluptatum!</p>
                        </div>
                        <div style="display: none !important" class="chatbot-query-container container-flex">
                            <ul id="response-input" class="chat-messages list-unstyled">Tell me about this document
                            </ul>
                        </div>
                    </div>
                    <div class="chatInput-container d-flex align-items-center">
                        <div class="input-container container-flex">
                            <input type="text" class="form-control flex-grow-1" id="queryInput"
                                placeholder="e.g. Explain this contract in plain English"
                                   onkeypress="submitChat(event)">
                        </div>
                        <div class="sendButton-container">
                            <button class="btn btn-primary ml-3 send-button" id="send-button" onclick="sendQuery()">&gt;</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <svg class="loader-spinner" id="loader-spinner" version=" 1.2" xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 100 59">
        <path
            d="M55.42 25.14C55.64 26.48 55.75 27.85 55.75 29.25C55.75 43.27 44.46 54.61 30.5 54.61C16.54 54.61 5.25 43.27 5.25 29.25C5.25 15.23 16.54 3.89 30.5 3.89 C34.8 3.89 38.84 4.97 42.38 6.86" />
        <path
            d="M44.28 33.78C44.04 32.45 43.9 31.08 43.88 29.68C43.64 15.66 54.73 4.13 68.69 3.9C82.65 3.66 94.13 14.8 94.37 28.82C94.61 42.84 83.52 54.36 69.56 54.6C65.26 54.68 61.19 53.67 57.62 51.84" />
    </svg>

    <script src="/js/documentAnalysis.js"></script>

    <script>
        const ws = new WebSocket('ws://localhost:3000');

        ws.onopen = () => {
            console.log('WebSocket connection established');
        };

        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log("DATA: " + JSON.stringify(data.response));
            console.log(JSON.stringify(data.type));
            if (data.type == "chat") {
                if (data.response)
                {
                    generateSystemBubble(data.response.response);
                } else if (data.error)
                {
                    document.getElementById('response-output').innerText = `Error: ${data.error}`;
                }
            }
            else if (data.type == "summary") {
                document.getElementById('summary-box').innerText = data.response.response;
            }
        };

        function submitChat(event)
        {
            if (event.keyCode === 13)
            {
                document.getElementById("send-button").click();
            }
        }

        function addLoader() {
            var bubble = document.createElement('div');
            bubble.classList.add('system-bubble');
            bubble.setAttribute("id", "chat-loader");
            bubble.style.float = "left";
            bubble.style.paddingRight = "10vw";
            var text = document.createElement('p');
            text.innerText = "...";
            var window = document.getElementById('chat-window');
            bubble.appendChild(text);
            window.appendChild(bubble);
        }

        function removeLoader() {
            var loader = document.getElementById('chat-loader').remove();
        }

        function generateSystemBubble(message) {
            removeLoader();
            var bubble = document.createElement('div');
            bubble.classList.add('system-bubble');
            bubble.style.float = "left";
            bubble.style.paddingRight = "5vw";
            var text = document.createElement('p');
            text.innerText = message;
            var window = document.getElementById('chat-window');
            bubble.appendChild(text);
            window.appendChild(bubble);
        }

        function generateUserBubble(message)
        {
            var bubble = document.createElement('div');
            bubble.classList.add('user-bubble');
            bubble.style.float = "right";
            bubble.style.paddingLeft = "5vw";
            var text = document.createElement('p');
            text.innerText = message;
            var window = document.getElementById('chat-window');
            bubble.appendChild(text);
            window.appendChild(bubble);
            window.scrollTop = window.scrollHeight;
            addLoader();
        }

        function sendQuery() {
            const query = document.getElementById('queryInput').value;
            const vectorstore = sessionStorage.getItem("sessionNamespace");
            const type = "chat";
            generateUserBubble(document.getElementById('queryInput').value);
            document.getElementById('queryInput').value = "";
            ws.send(JSON.stringify({ query, vectorstore, type }));
            window.scrollTop = window.scrollHeight;
        }

        function generateSummary() {
            var query = "Generate a brief yet informative summary about this especially the critical details (e.g., dates, people, references). Make sure your summary does not exceed 250 words.";
            var vectorstore = sessionStorage.getItem("sessionNamespace");
            var type = "summary";
            ws.send(JSON.stringify({ query, vectorstore, type }));
        }

        async function purgePinecone() {
            const purgePineconeRequestBody = {
                Namespace: sessionStorage.getItem("sessionNamespace")
            }
            showLoader();
            await fetch("/api/indexer/purgePinecone", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(purgePineconeRequestBody)
            })
                .then(response => {
                    hideLoader();
                    if (!response.ok) {
                        sessionStorage.setItem("purgePineconeStatus", "fail");
                        displayError("System is under maintenance. Please try again later.")
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    sessionStorage.setItem("purgePineconeStatus", "success");
                    return response.json();
                })
                .then(data => {
                    hideLoader();
                    sessionStorage.setItem("purgePineconeStatus", "success");
                    console.log(data);
                })
                .catch(error => {
                    sessionStorage.setItem("purgePineconeStatus", "fail");
                    hideLoader();
                    displayError("System is under maintenance. Please try again later.")
                    console.error('Fetch error:', error);
                });
            return Promise.resolve();
        }

        function routeToFileUpload() {
            var fileUploadUrl = window.location.protocol + "//" + window.location.host + '/Home/FileUpload';
            window.location.href = fileUploadUrl;
            return Promise.resolve();
        }

        async function newUploadFlow() {
            await purgePinecone();
            if (sessionStorage.getItem("purgePineconeStatus") == "success") {
                await routeToFileUpload();
            }
        }

        window.onload = function() {
            setTimeout(function() {
                generateSummary();
            }, 20000);
            hideLoader();
        }
    </script>
</body>